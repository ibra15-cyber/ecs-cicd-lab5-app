name: Build, Push to ECR and Generate Deployment Artifacts

on:
  push:
    branches: [ "master" ]

permissions:
  id-token: write
  contents: read

jobs:
  build-push-and-generate-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon -x test

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Generate Deployment Artifacts
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_REGION: eu-west-1
        run: |
          # Get values from CloudFormation outputs
          DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='RDSInstanceEndpoint'].OutputValue" --output text)
          DB_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='DBSecretArn'].OutputValue" --output text)
          S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
          TASK_EXEC_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='ECSTaskExecutionRoleArn'].OutputValue" --output text)
          TASK_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='ECSTaskRoleArn'].OutputValue" --output text)
          
          # Create appspec.yml with just the family name (CodeDeploy will resolve it)
          cat > appspec.yml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "java-full-stack-Task"
                  LoadBalancerInfo:
                    ContainerName: "java-full-stack-Container"
                    ContainerPort: 8080
          EOF
          
          # Create taskdef.json
          cat > taskdef.json << EOF
          {
            "family": "java-full-stack-Task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "$TASK_EXEC_ROLE_ARN",
            "taskRoleArn": "$TASK_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "java-full-stack-Container",
                "image": "$ECR_REGISTRY/$ECR_REPOSITORY:latest",
                "essential": true,
                "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
                "environment": [
                  {"name": "SPRING_DATASOURCE_URL", "value": "jdbc:postgresql://${DB_ENDPOINT}/photogallery"},
                  {"name": "SPRING_DATASOURCE_USERNAME", "value": "postgres"},
                  {"name": "S3_BUCKET_NAME", "value": "$S3_BUCKET_NAME"},
                  {"name": "AWS_REGION", "value": "eu-west-1"}
                ],
                "secrets": [
                  {"name": "SPRING_DATASOURCE_PASSWORD", "valueFrom": "${DB_SECRET_ARN}:password::"}
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/java-full-stack",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          
          zip -r deployment-artifacts.zip appspec.yml taskdef.json

      - name: Upload Deployment Artifacts to S3
        run: |
          ARTIFACT_BUCKET=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='ArtifactBucketName'].OutputValue" --output text)
          aws s3 cp deployment-artifacts.zip s3://$ARTIFACT_BUCKET/deployment-artifacts/latest.zip

      - name: Trigger CodePipeline Execution
        run: |
          PIPELINE_NAME=$(aws cloudformation describe-stacks --stack-name ibra-cfn-infrastructure --query "Stacks[0].Outputs[?OutputKey=='CodePipelineName'].OutputValue" --output text)
          aws codepipeline start-pipeline-execution --name $PIPELINE_NAME